*******************************************************************************************
Task 1: Create a project jumphost instance:
*******************************************************************************************
gcloud config set compute/region us-east1
gcloud config set compute/zone us-east1-b

gcloud compute project-info describe --project <ID_projektu>

gcloud config get-value compute/zone
gcloud config get-value compute/region

export ZONE=us-east1-b

gcloud compute instances create nucleus-jumphost \
          --machine-type f1-micro \
          --zone $ZONE
          
*******************************************************************************************       
Task 2: Create a Kubernetes service cluster:
*******************************************************************************************
gcloud config set compute/region us-east1
gcloud config set compute/zone us-east1-b
gcloud container clusters create toskpl-cluster

gcloud container clusters get-credentials toskpl-cluster

kubectl create deployment hello-server \ 
          --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-server \
          --type=LoadBalancer --port 8080

*******************************************************************************************
Task 3: Set up an HTTP load balancer:
*******************************************************************************************
script:

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

Step1: Create an instance template.

          gcloud compute instance-templates create nginx-template \
                    --metadata-from-file startup-script=startup.sh

Step2: Create a target pool.

          gcloud compute target-pools create nginx-pool

          region 19

Step3: Create a managed instance group

          gcloud compute instance-groups managed create nginx-group \
                    --base-instance-name nginx \
                    --size 2 \
                    --template nginx-template \
                    --target-pool nginx-pool

          gcloud compute instances list

Step4: Create a firewall rule to allow traffic (80/tcp).

          gcloud compute firewall-rules create www-firewall \
                    --allow tcp:80

          gcloud compute forwarding-rules create nginx-lb \
                    --region us-east1 \
                    --ports=80 \
                    --target-pool nginx-pool

          gcloud compute forwarding-rules list

Step5: Create a health check

          gcloud compute http-health-checks create http-basic-check --port 80

          gcloud compute instance-groups managed set-named-ports nginx-group \
                    --named-ports http:80

Step6: Create a backend service, and attach the managed instance group.

          gcloud compute backend-services create nginx-backend \
                    --protocol HTTP \
                    --http-health-checks http-basic-check \
                    --global

          gcloud compute backend-services add-backend nginx-backend --instance-group nginx-group \
                    --instance-group-zone us-east1-b \
                    --global

Step7: Create a URL map, and target the HTTP proxy to route requests to your URL map

          gcloud compute url-maps create web-map \
                    --default-service nginx-backend

          gcloud compute target-http-proxies create http-lb-proxy --url-map web-map

Step8: Create a forwarding rule.

          gcloud compute forwarding-rules create http-content-rule \
                    --global \
                    --target-http-proxy http-lb-proxy \
                    --ports 80 

          gcloud compute forwarding-rules list
